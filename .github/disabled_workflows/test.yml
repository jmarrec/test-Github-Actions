name: Test bed

on:
  push:
    branches: [ master, develop ]
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
  pull_request:
    branches: [ master, develop ]
  workflow_dispatch:
    inputs:
      actions_run_id:
        description: 'The Github Actions run ID in which we will find the artifacts'
        required: true
        default: '247094624'

env:
  TRUE_BOOL: true
  FALSE_BOOL: false
  IS_OFFICIAL_RELEASE: ${{ contains(github.ref, 'refs/tags') }}

defaults:
  run:
    shell: bash

jobs:

  build:
    # Note: as of 2021-01-29, this only works for push, not for pull request
    #if: "!(contains(github.event.head_commit.message, 'skip') && contains(github.event.head_commit.message, 'ci'))"
    runs-on: ${{ matrix.os }}
    strategy:
      # fail-fast: Default is true, switch to false to allow one platform to fail and still run others
      fail-fast: false
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04, windows-latest, macos-latest]
        include:
          - os: windows-latest
            vs-generator: Win32
    steps:
    - uses: actions/checkout@v2

    - name: test conditional based on env (TRUE_BOOL)
      if: env.TRUE_BOOL == 'true'
      shell: bash
      run: |
        echo "It runs!"

    - name: test conditional based on env (FALSE_BOOL)
      if: env.FALSE_BOOL == 'true'
      shell: bash
      run: |
        echo "It runs!"

    - uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    - name: Test Path and co
      shell: bash
      run: |
        set -x
        echo "env.RUNNER_TOOL_CACHE=${{ env.RUNNER_TOOL_CACHE }}"
        echo "RUNNER_TOOL_CACHE=$RUNNER_TOOL_CACHE"

    - name: Test annotations
      shell: bash
      run: |
        echo "::error file=main.cpp,line=1,endLine=2,title=EUI deviation too large: model_articulation1_bundle_git.osw::This file exceeds the threshold of 1.00%: -5.246%"

    - name: Test python annotations
      shell: python
      run: |
        print("::warning file=CMakeLists.txt,line=1,endLine=2,title=EUI deviation is concerning: ems_scott.osm::This file exceeds the display threshold of 0.10%: -0.325%")

    - name: Test Aria
      shell: bash
      run: |
        aria2c --version || echo "It is not available"
        echo "IS_OFFICIAL_RELEASE=$IS_OFFICIAL_RELEASE"

    - name : test python version
      shell: bash
      run: |
          set -x
          python --version
          ruby --version || true
          cl || true
          which cl || true

    - name: test pdf tools
      shell: bash
      run: |
        set -x
        N=$(nproc 2>/dev/null || sysctl -n hw.logicalcpu)
        echo $N
        pdfinfo || true
        pdftk || true
        nproc || true
        sysctl -n hw.ncpu || true

    - name: test msys installation
      if: runner.os == 'Windows'
      shell: bash
      run: |
        set -x
        ls /c/msys64/ || true
        ls /c/msys64/mingw64/ || true
        ls /c/msys64/mingw64/bin/ || true
        tree /c/msys64/mingw64/ || true
        find /c/msys64 -name "*gfortran.exe"

    - name: Echo some SHAs
      shell: bash
      run: |
          echo "GITHUB_REF=$GITHUB_REF GITHUB_BASE_REF=$GITHUB_BASE_REF GITHUB_HEAD_REF=$GITHUB_HEAD_REF"
          echo "GITHUB_EVENT_PATH=$GITHUB_EVENT_PATH"
          echo "GITHUB_SHA=$GITHUB_SHA"
          echo "github.sha = ${{ github.sha }}"
          echo "github.event.repository.commits_url = ${{ github.event.repository.commits_url }}"
          echo "github.event.after = ${{ github.event.after }}"

          test="${{ contains(toJSON(github.event.commits.*.message), '[skip-ci]') }}"
          echo "test=$test"

    #- name: Action Version
      #id: skip-ci
      #uses: ./.github/actions/skip_ci

    #- name: skip step composite version if SKIP_CI
      #if: ${{ !skip-ci.outputs.skip-ci }}
      #run: echo "I AM RUNNING because NOT SKIPPING CI"

    - name: Bash Version
      run: |
          bash --version
          commits_url="${{ github.event.repository.commits_url }}"
          commit_sha="${{ github.event.after }}"
          url="${commits_url/\{\/sha\}/\/$commit_sha}"
          data=$(curl -L -s -S $url)
          last_commit_msg=$(echo $data | jq -r .commit.message)
          echo "last_commit_msg=$last_commit_msg"
          ([[ ${last_commit_msg,,} =~ skip[\-_[:space:]]ci ]] || [[ ${last_commit_msg,,} =~ ci[\-_[:space:]]skip ]]) && SKIP_CI=true || SKIP_CI=false
          echo "SKIP_CI=$SKIP_CI"
          echo SKIP_CI=$SKIP_CI >> $GITHUB_ENV

    - name: skip step bash version if SKIP_CI
      if: ${{ !env.SKIP_CI }}
      run: echo "I AM RUNNING because NOT SKIPPING CI"

    - name: run step bash version if SKIP_CI
      if: ${{ env.SKIP_CI }}
      run: echo "I AM RUNNING because SKIPPING CI"

    - name: Python version - install requests
      shell: bash
      run: pip install requests

    - name: Python Skip CI via Github API
      shell: python
      run: |
          import sys
          import os
          print(sys.version)
          import re
          import subprocess
          import json
          import requests

          commits_url = "${{ github.event.repository.commits_url }}"
          print("commits_url={}".format(commits_url))

          commit_sha = "${{ github.event.after }}"
          print("commit_sha={}".format(commit_sha))
          url = commits_url.replace('{/sha}', '/{}'.format(commit_sha))

          r = requests.get(url)
          if not r.ok:
              print("Something went wrong when querying {}, status={}".format(url, r.status_code))
              exit(0)
          data = r.json()
          last_commit_msg = data['commit']['message']

          print("last_commit_msg={}".format(last_commit_msg))
          skip_ci = re.compile(r'((?:\[skip[ _-]ci\])|(?:\[ci[ _-]skip\]))', re.IGNORECASE)
          m = skip_ci.search(last_commit_msg)
          if m:
              print("Skipping CI since the commit message has '{}'".format(m.groups()[0]))
              with open(os.environ['GITHUB_ENV'], 'a') as f:
                  f.write("\nSKIP_CI=true")
              exit(0)
          else:
              print('Not skipping CI')
              with open(os.environ['GITHUB_ENV'], 'a') as f:
                  f.write("\nSKIP_CI=false")
              exit(0)

    # Doesn't work when pull_request, only on push
    #- name: Skip CI was entered
      #if: "contains(toJSON(github.event.commits.*.message), '[skip-ci]')"
      #run: echo "skip-ci entered"

    # Doesn't work when pull_request, last commit (and only available) is a merge commit anyways
    # And also the match_count stuff is not working on the CI machine (works on my ubuntu)
    #- name: Bash Skip CI?
      #shell: bash
      #run: |
        #git log -2 --pretty=format:%s
        #last_commit_msg=$(git log -1 --pretty=format:%s)
        #echo "last commit message: $last_commit_msg"

        #echo "try match_count1"
        #match_count1=$(echo $last_commit_msg | grep -ci "\[skip[ _-]ci\]")
        #echo "try match_count2"
        #match_count2=$(echo $last_commit_msg | grep -ci "\[ci[ _-]skip\]")
        #echo "try match_count"
        #match_count=$((match_count1 + match_count2))
        #echo "There are $match_count of the skip-ci or ci-skip variants"
        #if [[ "$match_count" -eq 0 ]]; then
          #echo "You should not skip CI"
        #else
          #echo "Skip CI"
        #fi

    # Debug section: I saved the logs from both a push and pull_request, useful to do a gvim -d -f for a diff side by side
    - name: Dump GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: echo "$GITHUB_CONTEXT" | tee github.json
    - name: Dump job context
      env:
        JOB_CONTEXT: ${{ toJson(job) }}
      run: echo "$JOB_CONTEXT" | tee job.json
    - name: Dump steps context
      env:
        STEPS_CONTEXT: ${{ toJson(steps) }}
      run: echo "$STEPS_CONTEXT" | tee steps.json
    - name: Dump runner context
      env:
        RUNNER_CONTEXT: ${{ toJson(runner) }}
      run: echo "$RUNNER_CONTEXT" | tee runner.json
    - name: Dump strategy context
      env:
        STRATEGY_CONTEXT: ${{ toJson(strategy) }}
      run: echo "$STRATEGY_CONTEXT" | tee strategy.json
    - name: Dump matrix context
      env:
        MATRIX_CONTEXT: ${{ toJson(matrix) }}
      run: echo "$MATRIX_CONTEXT" | tee matrix.json


    - name: test Cmake Generator
      shell: bash
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          #echo CMAKE_GENERATOR=-G 'Visual Studio 16 2019' -A ${{ matrix.vs-generator }} >> $GITHUB_ENV
          #   quoted: cmake '-G Visual Studio 16 2019 -A Win32'
          # echo CMAKE_GENERATOR="-G 'Visual Studio 16 2019' -A ${{ matrix.vs-generator }}" >> $GITHUB_ENV
          #   quoted: cmake '-G '\''Visual Studio 16 2019'\'' -A Win32'
          # echo CMAKE_GENERATOR='-G \'Visual Studio 16 2019\' -A ${{ matrix.vs-generator }}' >> $GITHUB_ENV  # Error
          # echo CMAKE_GENERATOR=-G \'Visual Studio 16 2019\' -A ${{ matrix.vs-generator }} >> $GITHUB_ENV
          # Unquoted: cmake -G ''\''Visual' Studio 16 '2019'\''' -A Win32
          #   quoted: cmake '-G '\''Visual Studio 16 2019'\'' -A Win32'
          # echo CMAKE_GENERATOR=-G \"Visual Studio 16 2019\" -A ${{ matrix.vs-generator }} >> $GITHUB_ENV
          # unquoted: cmake -G '"Visual' Studio 16 '2019"' -A Win32
          #   quoted: cmake '-G "Visual Studio 16 2019" -A Win32'
          # echo CMAKE_GENERATOR=-G "Visual Studio 16 2019" -A ${{ matrix.vs-generator }} >> $GITHUB_ENV
          # unquoted: cmake -G Visual Studio 16 2019 -A Win32
          # echo CMAKE_GENERATOR=-G "\"Visual Studio 16 2019\"" -A ${{ matrix.vs-generator }} >> $GITHUB_ENV
          # unquoted: cmake -G '"Visual' Studio 16 '2019"' -A Win32
          # echo CMAKE_GENERATOR=-G "Visual\ Studio\ 16\ 2019" -A ${{ matrix.vs-generator }} >> $GITHUB_ENV
          # unquoted: cmake -G 'Visual\' 'Studio\' '16\' 2019 -A Win32
          echo CMAKE_GENERATOR=-G Visual\\ Studio\\ 16\\ 2019 -A ${{ matrix.vs-generator }} >> $GITHUB_ENV
          # unquoted: cmake -G 'Visual\' 'Studio\' '16\' 2019 -A Win32

        fi;

    - name: did Cmake generator work?
      shell: bash
      run: |
        set -x
        cmake $CMAKE_GENERATOR

    - name: Where is the damn action?
      shell: bash
      run: |
        echo "${{ github.event.pull_request.body }}"
        pwd
        ls
        ls .github
        ls .github/actions/
        ls .github/actions/build_context

    - name: Call my own action
      uses: ./.github/actions/build_context
      with:
        who-to-greet: 'Mona the Octocat'

    - run: echo random-number ${{ steps.foo.outputs.random-number }}
      shell: bash

    - name: md5sum
      shell: bash
      run: |
          echo "Coucou" > test.txt
          echo "Note that as long as you put shell=bash, this works plenty fine on windows-latest too"
          md5sum test.txt > ${{ matrix.os }}.md5sum


    - name: Upload md5sum artifacts
      uses: actions/upload-artifact@v2
      with:
          path: ${{ matrix.os }}.md5sum

    - name: ls
      shell: bash
      run: |
        ls *.json

  makemd5:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/download-artifact@v2

    - name: Display structure of downloaded files
      shell: bash
      run: ls -R

    - name: Cat all md5sums into one
      shell: bash
      run: |
          cat ./artifact/* > md5sums.txt
          cat md5sums.txt
