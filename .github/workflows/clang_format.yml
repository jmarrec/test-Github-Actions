name: Code Integrity

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  code_integrity_checks:
    name: Static Code Analysis
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4

      - name: Install clang-format-19
        shell: bash
        run: |
          # 14s to install from apt, getting  19.1.1
          # Getting it from LLVM takes 1min13s
          # sudo apt-get update && apt-get install -y wget gnupg lsb-release software-properties-common
          # wget -qO - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo gpg --dearmor -o /usr/share/keyrings/llvm-archive-keyring.gpg
          # echo "deb [signed-by=/usr/share/keyrings/llvm-archive-keyring.gpg] http://apt.llvm.org/$(lsb_release -cs)/ llvm-toolchain-$(lsb_release -cs)-19 main" | sudo tee /etc/apt/sources.list.d/llvm.list
          sudo apt-get update -q
          sudo apt-get install -y clang-format-19
          clang-format-19 --version

      - name: Run clang-format against C++ files touched by the PR
        if: ${{ github.event_name == 'pull_request' }}
        shell: bash
        run: |
            clang-format-19 --version
            begin_group() { echo -e "::group::\033[93m$1\033[0m"; }

            begin_group "Find changed files"
            echo "GITHUB_REF=$GITHUB_REF GITHUB_BASE_REF=$GITHUB_BASE_REF GITHUB_HEAD_REF=$GITHUB_HEAD_REF"
            git fetch --all --quiet
            PR_BRANCH_NAME=remotes/origin/$GITHUB_HEAD_REF
            TARGET_BRANCH_NAME=remotes/origin/$GITHUB_BASE_REF
            # first find if any files changed
            changed_files=$(git diff "$PR_BRANCH_NAME" "$TARGET_BRANCH_NAME" --name-only src/ tst/ | /bin/grep -E '\.(cpp|cc|c|hpp|hh|h)$')
            file_count=$(echo "$changed_files" | wc -l)
            if [ $file_count -eq 0 ]; then
              echo "No files of type (cpp, c, hpp, h) changed. Skipping clang-formatting"
              exit 0
            else
              begin_group "Found $file_count C/C++ changed files"
              echo "$changed_files"
              echo "::endgroup::"
            fi
            echo "::endgroup::"

            begin_group "Run clang-format for changes files"
            # Using \0 as a terminator in case we'd ever have files with spaces
            git diff -z "$PR_BRANCH_NAME" "$TARGET_BRANCH_NAME" --name-only src/ tst/ \
              | /bin/grep -z -E '\.(cpp|cc|c|hpp|hh|h)$' \
              | xargs -0 -P "$(nproc)" -n 1 clang-format-19 -style=file -i -fallback-style=none --verbose

            # clang-format will auto correct files so prepare the diff and use this as artifact
            git diff > clang_format.patch
            echo "::endgroup::"

            # Delete if nothhing otherwise exit 1 to indicate a failed job
            if [ ! -s clang_format.patch ]; then
              rm clang_format.patch
              exit 0
            else
              begin_group "clang-format auto corrected $(git diff --name-only | wc -l) files:"
              git diff --name-only
              echo "::endgroup::"
              echo "::error title=Clang Format Check Failed::Formatting issues detected. See 'Clang Format Auto Corrections' group above."
              echo -e "\nPlease correct these files by running clang-format-19 locally, or download the artifact "
              echo 'and run `patch -p1 < /path/to/clang_format.patch`'
              exit 1
            fi

      - name: Run clang-format for entire codebase
        if: ${{ github.event_name == 'push' }}
        shell: bash
        run: |
            clang-format-19 --version
            begin_group() { echo -e "::group::\033[93m$1\033[0m"; }

            begin_group "Run clang-format"
            find src tst \( -name "*.hpp" -o -name "*.h" -o -name "*.hh" -o -name "*.cc" -o -name "*.cpp" -o -name "*.c" \) \
              -print0 | xargs -0 -P "$(nproc)" -n 1 clang-format-19 -style=file -i -fallback-style=none --verbose

            # clang-format will auto correct files so prepare the diff and use this as artifact
            git diff > clang_format.patch
            echo "::endgroup::"

            # Delete if nothing otherwise exit 1 to indicate a failed job
            if [ ! -s clang_format.patch ]; then
              rm clang_format.patch
              exit 0
            else
              begin_group "clang-format auto corrected $(git diff --name-only | wc -l) files:"
              git diff --name-only
              echo "::endgroup::"
              echo "::error title=Clang Format Check Failed::Formatting issues detected. See 'Clang Format Auto Corrections' group above."
              exit 1
            fi

      - name: Upload clang-format patch as artifact
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
            name: EnergyPlus-${{ github.sha }}-clang_format.patch
            path: clang_format.patch

      - name: Commit Auto-corrections
        shell: bash
        if: ${{ always() && github.event_name == 'push' }}
        run: |
          git add -u
          if [[ $(git diff --cached --exit-code) ]]; then
            echo "Commiting Lint Autocorrects"
            git config --global user.email 'github-actions[bot]@users.noreply.github.com'
            git config --global user.name 'github-lint-actions[bot]'
            git commit -m "[chore] Commit clang-format autocorrects"
            echo '' >> .git-blame-ignore-revs
            git log -n1 --pretty='format:# %C(auto)%s [%an, %as]%n%H%n' >> .git-blame-ignore-revs
            git add .git-blame-ignore-revs
            git commit -m "Add clang-format autocorrects to git-blame-ignore-revs"
            git push
          else
            echo "No Autocorrect needed"
          fi
