name: Test release from existing Actions run

on:
  push:
    branches: [ master ]
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
  workflow_dispatch:
    inputs:
      actions_run_id:
        description: 'The Github Actions run ID in which we will find the artifacts'
        required: true
        default: '247094624'
      commit_sha:
        description: 'Commit SHA, for which you already have artifacts up and running'
        required: true
        default: '9e1e85bbf373159e051eaf6a752c61ca5de4e761'
      tag_name:
        description: 'tag name'
        required: true
        default: 'v1.1.0-alpha1'
      release_name:
        description: 'Release Name'
        required: true
        default: 'Test of XXXX feature / Release Candidate'


jobs:

  release_installers:
    runs-on: ubuntu-latest
    # if: github.event_name == 'workflow_dispatch' || contains(github.ref, 'refs/tags')

    steps:
    - uses: actions/checkout@v2

    - name: Print Input
      shell: bash
      run: |
        echo "Actions run ID: ${{ github.event.inputs.actions_run_id }}"
        echo "Commit SHA: ${{ github.event.inputs.commit_sha }}"
        echo "Tag Name: ${{ github.event.inputs.tag_name }}"
        echo "Release Name: ${{ github.event.inputs.release_name }}"
        echo "GITHUB_EVENT_PATH=$GITHUB_EVENT_PATH"
        cat $GITHUB_EVENT_PATH

    - name: Dump GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: |
        echo "$GITHUB_CONTEXT" | tee github.json
    - name: Dump job context
      env:
        JOB_CONTEXT: ${{ toJson(job) }}
      run: echo "$JOB_CONTEXT" | tee job.json
    - name: Dump steps context
      env:
        STEPS_CONTEXT: ${{ toJson(steps) }}
      run: echo "$STEPS_CONTEXT" | tee steps.json
    - name: Dump runner context
      env:
        RUNNER_CONTEXT: ${{ toJson(runner) }}
      run: echo "$RUNNER_CONTEXT" | tee runner.json
    - name: Dump strategy context
      env:
        STRATEGY_CONTEXT: ${{ toJson(strategy) }}
      run: echo "$STRATEGY_CONTEXT" | tee strategy.json
    - name: Dump matrix context
      env:
        MATRIX_CONTEXT: ${{ toJson(matrix) }}
      run: echo "$MATRIX_CONTEXT" | tee matrix.json

    - name: Locate artifacts
      id: locate_artifacts
      shell: bash
      run: |
        curl --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' https://api.github.com/repos/openstudiocoalition/OpenStudioApplication/actions/runs/247094624/artifacts > artifacts.json
        echo "PLATFORM_NAME=${{ env.PLATFORM_NAME }}"
        cat artifacts.json
        total_count=$(cat artifacts.json | jq -r '.total_count')
        echo "There are $total_count artifacts found"
        cat artifacts.json | jq -r '.artifacts | . [] | .name'
        urls=$(cat artifacts.json | jq -r '.artifacts | . [] | .archive_download_url')
        echo "::set-output name=URLS::${urls}"

    - name: Print output of last?
      shell: bash
      run: |
        echo "${{steps.locate_artifacts.outputs.URLS}}"
        for url in "${{steps.locate_artifacts.outputs.URLS}}"; do
          echo "$url"
        done

    - name: Create a release if triggered manually
      if: github.event_name == 'workflow_dispatch'
      id: create_release_manual
      uses: actions/create-release@v1.1.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.event.inputs.tag_name }}
        release_name: ${{ github.event.inputs.release_name }}
        body: |
          Installer for ${{ github.event.inputs.commit_sha }}, see Github Actions run [${{ github.event.inputs.actions_run_id }}](https://github.com/openstudiocoalition/OpenStudioApplication/actions/runs/${{ github.event.inputs.actions_run_id }}$)
        draft: true
        prerelease: true

    - name: Create a release if triggered by a tag
      id: create_release_tag
      if: github.event_name != 'workflow_dispatch' && contains(github.ref, 'refs/tags')
      uses: actions/create-release@v1.1.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          Release Notes pending
        draft: false
        prerelease: true

    - name: Create a md5sum file
      if: github.event_name == 'workflow_dispatch' || contains(github.ref, 'refs/tags')
      run: |
        md5sum *.json > md5sums.txt
        cat md5sums.txt
        echo "Manual: ${{ steps.create_release_manual.outputs.upload_url }}"
        echo "Tag: ${{ steps.create_release_tag.outputs.upload_url }}"
        echo "join?: ${{ format('{0}{1}', steps.create_release_manual.outputs.upload_url, steps.create_release_tag.outputs.upload_url) }}"


    - name: Create a 755 mode script to see if permissions are maintained by upload
      run: |
          echo "Hello World" > test.sh
          chmod +x test.sh

    - name: Release Asset
      if: github.event_name == 'workflow_dispatch' || contains(github.ref, 'refs/tags')
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ format('{0}{1}', steps.create_release_manual.outputs.upload_url, steps.create_release_tag.outputs.upload_url) }}
        asset_path: ./md5sums.txt
        asset_name: md5sums.txt
        asset_content_type: text/plain

    - name: Release executable script
      if: github.event_name == 'workflow_dispatch' || contains(github.ref, 'refs/tags')
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ format('{0}{1}', steps.create_release_manual.outputs.upload_url, steps.create_release_tag.outputs.upload_url) }}
        asset_path: ./test.sh
        asset_name: test.sh
        asset_content_type: application/x-shellscript

    - name: Release Asset Glob
      if: github.event_name == 'workflow_dispatch' || contains(github.ref, 'refs/tags')
      uses: shogo82148/actions-upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ format('{0}{1}', steps.create_release_manual.outputs.upload_url, steps.create_release_tag.outputs.upload_url) }}
        asset_path: ./*.json
